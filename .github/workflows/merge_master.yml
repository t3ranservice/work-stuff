# We need branch protection rule for all below to have purpose

env:
  SEARCH_PATTERN: "[_AUTO_] - pull-request"
  MASTER_BRANCH_NAME: "main"
  STAGING_BRANCH_NAME: "staging"

permissions:
  pull-requests: write

name: "Merge to master"
on:
  push:
    branches:
      - staging
  schedule:
    - cron: "*/5 * * * *"

concurrency:
  group: ${{ github.workflow }}

jobs:
  auto_merge_master:
    name: "Do an auto-merge to master"
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Check if any auto pull requests to master exist
        id: poll-prs
        uses: actions/github-script@v6
        with:
          script: |
            const TIMEOUT = 0.5 * 60 * 1000; // 5 minutes in milliseconds
            const INTERVAL = 15 * 1000; // 15 seconds in milliseconds
            const START_TIME = Date.now();
            let prsExist = true;
            let timeoutExceeded = false;

            console.log("Polling for pull requests...");

            while (true) {

              const elapsedTime = Date.now() - START_TIME;


              if (elapsedTime > TIMEOUT) {
                console.log("Timeout reached while waiting for another PR to get closed");
                timeoutExceeded = true
                break;
              }

              const pullRequests = ( await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open'
              })).data.filter(pr => pr.base.ref === '${{ env.MASTER_BRANCH_NAME }}' && pr.title.includes('${{ env.SEARCH_PATTERN }}'))

              if (pullRequests.length === 0) {
                console.log("No open pull requests found. We can proceed further");
                prsExist = false
                break;
              }
              await new Promise(resolve => setTimeout(resolve, INTERVAL));      
            }
            require('fs').appendFileSync(process.env.GITHUB_OUTPUT, `prsExist=${JSON.stringify(prsExist)}\n`);
            require('fs').appendFileSync(process.env.GITHUB_OUTPUT, `timeoutExceeded=${JSON.stringify(timeoutExceeded)}\n`);

      - name: "Send Slack message about stuck PR to master"
        if: steps.poll-prs.outputs.timeoutExceeded == 'true'
        id: send-timeout-message-stuck
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: "dteran-test"
          SLACK_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_MESSAGE: "Could not open PR to master because there is other PR stuck!"
          SLACK_COLOR: "failure"
          SLACK_USERNAME: "borg-sphere"
          SLACK_ICON: "https://avatars.slack-edge.com/2020-05-22/1133584994822_7ae043ae65db02608c79_512.jpg"

      - name: "Open PR to master"
        if: steps.poll-prs.outputs.prsExist == 'false'
        id: open-pr-master
        uses: actions/github-script@v6
        with:
          script: |
            const createPr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: "staging",
              base: "main",
              title: '${{ env.SEARCH_PATTERN }}',
            });
            require('fs').appendFileSync(process.env.GITHUB_OUTPUT, `prNumber=${JSON.stringify(createPr.data.number)}\n`);

      - name: "Send Slack message about failed PR to master"
        if: failure() && steps.open-pr-master.outcome != 'skipped'
        id: send-failure-message-open
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: "dteran-test"
          SLACK_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_MESSAGE: "Could not open a PR to master, please check the issue."
          SLACK_COLOR: "failure"
          SLACK_USERNAME: "borg-sphere"
          SLACK_ICON: "https://avatars.slack-edge.com/2020-05-22/1133584994822_7ae043ae65db02608c79_512.jpg"

      - name: "Merge PR to master"
        if: steps.open-pr-master.outcome == 'success'
        id: merge-pr-master
        uses: actions/github-script@v6
        with:
          script: |
            const TIMEOUT = 5 * 60 * 1000; // 5 minutes in milliseconds
            const INTERVAL = 15 * 1000; // 15 seconds in milliseconds
            const START_TIME = Date.now();
            let isMergeable = false
            let timeoutExceeded = false

            console.log("Waiting for PR to become mergeable...");

            while (true) {

              const elapsedTime = Date.now() - START_TIME;

              if (elapsedTime > TIMEOUT) {
                console.log("Timeout reached while waiting for PR to become mergeable");
                timeoutExceeded = true
                break;
              }

              const response = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: '${{ steps.open-pr-master.outputs.prNumber }}'
              });

              if (pullRequests.length === 0) {
                console.log("PR is mergeable. We can proceed further.");
                isMergeable = true
                break;
              }
              await new Promise(resolve => setTimeout(resolve, INTERVAL));      
            }

            if (isMergeable === true) {
              const mergePr = await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: '${{ steps.open-pr-master.outputs.prNumber }}',
                })
            }
            require('fs').appendFileSync(process.env.GITHUB_OUTPUT, `timeoutExceeded=${JSON.stringify(timeoutExceeded)}\n`);

      - name: "Send Slack message about timeout waiting for PR to become mergeable"
        if: steps.merge-pr-master.outputs.timeoutExceeded == 'true'
        id: send-failure-message-timeout
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: "dteran-test"
          SLACK_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_MESSAGE: "Workflow failed while waiting for PR to become mergeable, please check the issue"
          SLACK_COLOR: "failure"
          SLACK_USERNAME: "borg-sphere"
          SLACK_ICON: "https://avatars.slack-edge.com/2020-05-22/1133584994822_7ae043ae65db02608c79_512.jpg"

      - name: "Send Slack message about failed merge"
        if: failure() && steps.merge-pr-master.outcome != 'skipped'
        id: send-failure-message
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: "dteran-test"
          SLACK_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_MESSAGE: "Auto merge to master has failed, please check the logs."
          SLACK_COLOR: "failure"
          SLACK_USERNAME: "borg-sphere"
          SLACK_ICON: "https://avatars.slack-edge.com/2020-05-22/1133584994822_7ae043ae65db02608c79_512.jpg"

      - name: "Send Slack message about successful merge"
        if: success()
        id: send-success-message
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: "dteran-test"
          SLACK_TOKEN: ${{ secrets.SLACK_API_TOKEN }}
          SLACK_MESSAGE: "PR to master has been successfuly merged"
          SLACK_COLOR: "success"
          SLACK_USERNAME: "borg-sphere"
          SLACK_ICON: "https://avatars.slack-edge.com/2020-05-22/1133584994822_7ae043ae65db02608c79_512.jpg"

  close_invalid_prs:
    name: "Close PRs created to master by humans"
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Fetch and close manual PRs to master if any
        id: fetch-and-close-invalid-prs
        uses: actions/github-script@v6
        with:
          script: |
            const pullRequests = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
            });

            const invalidMasterPrs = pullRequests.filter(pr =>
                pr.base.ref === '${{ env.MASTER_BRANCH_NAME }}' && !pr.title.includes('${{ env.SEARCH_PATTERN }}'));

            if (invalidMasterPrs.length > 0) {
              console.log("Close PR")
            }

      - name: Fetch and filter pull requests
        id: send-slack-message
        uses: actions/github-script@v6
        with:
          script: |
            console.log('${{ steps.fetch-and-close-invalid-prs.conclusion }}')
            console.log('${{ steps.fetch-and-close-invalid-prs.outcome }}')
            // Send Slack message here
