# We need branch protection rule for all below to have purpose

env:
  SEARCH_PATTERN: "[_AUTO_] - pull-request"
  MASTER_BRANCH_NAME: "main"
  STAGING_BRANCH_NAME: "staging"

permissions:
  pull-requests: write

name: "Merge to master"
on:
  push:
    branches:
      - staging
  schedule:
    - cron: "*/5 * * * *"

concurrency:
  group: ${{ github.workflow }}

jobs:
  auto_merge_master:
    name: "Do an auto-merge to master"
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - name: Fetch and filter pull requests
        id: poll-prs
        uses: actions/github-script@v6
        with:
          script: |
            const TIMEOUT = 0.5 * 60 * 1000; // 5 minutes in milliseconds
            const INTERVAL = 15 * 1000; // 15 seconds in milliseconds
            const START_TIME = Date.now();
            let result = { prsExist: true, timeoutExceeded = false }

            console.log("Polling for pull requests...");

            while (true) {

              const elapsedTime = Date.now() - START_TIME;


              if (elapsedTime > TIMEOUT) {
                console.log("Timeout reached without resolving condition.");
                result = { timeoutExceeded: true, prsExist: true }
                break;
              }

              const pullRequests = ( await github.rest.pulls.list({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'closed'
              })).data.filter(pr => pr.base.ref === '${{ env.MASTER_BRANCH_NAME }}' && pr.title.includes('${{ env.SEARCH_PATTERN }}'))

              if (pullRequests.length === 0) {
                console.log("No open pull requests found. Exiting loop.");
                result = { prsExist: false, timeoutExceeded: false }
                break;
              }

              await new Promise(resolve => setTimeout(resolve, INTERVAL));      
            }
            require('fs').appendFileSync(process.env.GITHUB_OUTPUT, `result=${JSON.stringify(result)}\n`);

      - name: "Test"
        run: |
          echo ${{ steps.poll-prs.outputs.result }}
          echo ${{ steps.poll-prs.outputs.result.prsExist }}

      # - name:

      # - name: Process valid pull request to master
      #   id: process-valid-master-prs
      #   if: ${{ needs.fetch-prs.outputs.validMasterPrs != '[]' }}
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const prs = ${{ needs.fetch-prs.outputs.validMasterPrs }}
      #       prs.forEach(pr => {
      #         github.rest.pulls.merge({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           pull_number: pr.number,
      #           }).then(response => {
      #             if (response.status === 200) {
      #               console.log(`Pull request ${pr.title}/${pr.number} to branch ${{ env.MASTER_BRANCH_NAME }} has been successfuly merged! Status code: ${response.status}`);
      #             } else {
      #               console.log(`Couldn't merge ${pr.title}/${pr.number}. Status code: ${response.status}`);
      #             }
      #             }).catch(error => {
      #               console.error(`Failed to close PR ${pr.title}/${pr.number}: `, error.message);
      #           });
      #         });

  close_invalid_prs:
    name: "Close PRs created to master by humans"
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Fetch and close manual PRs to master if any
        id: fetch-and-close-invalid-prs
        uses: actions/github-script@v6
        with:
          script: |
            const pullRequests = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
            });

            const invalidMasterPrs = pullRequests.filter(pr =>
                pr.base.ref === '${{ env.MASTER_BRANCH_NAME }}' && !pr.title.includes('${{ env.SEARCH_PATTERN }}'));

            if (invalidMasterPrs.length > 0) {
              console.log("Close PR")
            }

      - name: Fetch and filter pull requests
        id: send-slack-message
        uses: actions/github-script@v6
        with:
          script: |
            console.log('${{ steps.fetch-and-close-invalid-prs.conclusion }}')
            console.log('${{ steps.fetch-and-close-invalid-prs.outcome }}')

        #2DO
      #Send slack message if process-valid-master-prs failed
      #Send slack message if process-valid-master-prs succeeded
      #Send slack message if process-invalid-master-prs was not skipped and PR was closed successfuly
      #Send slack message if process-invalid-master-prs was not skipped but PR was not closed successfuly
