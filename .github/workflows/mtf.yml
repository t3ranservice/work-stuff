# ST_NAME
# CLOSED_PULL_REQUESTS (list)
# NEW_PULL_REQUESTS (list)
# FAILED_TEST_LST (list)
# AUTO_PR_LST (list)
# SECOND_MSG (bool)
# CUSTOM_STAGE (string)

# We set initial value to string for empty lists because there is no list data structure in GitHub Actions
env:
  closed_pull_requests: ""
  new_pull_requests: "[]"
  failed_test_lst: ""
  auto_pr_lst: ""
  second_msg: ${{ false }}
  custom_stage: ""
  github_base_url: "https://github.com"
  github_api_url: "https://api.github.com/repos/gdcorp-engineering/migration-tech-framework"
  slack_channel: "borg_github_internal"
  slack_token_id: "slack_borg_github_internal"
  SEARCH_PATTERN: "[_AUTO_] - pull-request"
  MASTER_BRANCH_NAME: "main"
  STAGING_BRANCH_NAME: "staging"

#TODO retention settings as in  Jenkins buildDiscarder

# Timestamps are supported in logs with shift + T
# Xterm highlighting is supported by default
# SkipDefaultCheckout is the default behavior
permissions:
  pull-requests: write

# 5 minutes is the shortest schedule GitHub can do
# [push] is for tests
name: "Ansible Lint"
on:
  [push]
  #schedule:
  #  - cron: "*/5 * * * *"

concurrency:
  group: ${{ github.workflow }}

jobs:
  get_pull_requests:
    name: Find and filter pull requests
    runs-on: ubuntu-latest
    outputs:
      validMasterPrs: ${{ steps.filter-prs.outputs.validMasterPrs }}
      invalidMasterPrs: ${{ steps.filter-prs.outputs.invalidMasterPrs }}
      validStagingPrs: ${{ steps.filter-prs.outputs.validStagingPrs }}

    steps:
      - name: Fetch all pull requests
        id: fetch-prs
        uses: actions/github-script@v6
        with:
          script: |
            const pullRequests = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            require('fs').appendFileSync(process.env.GITHUB_OUTPUT, `pulls=${JSON.stringify(pullRequests.data)}\n`);
            console.log("Status code for GET pull requests: " + pullRequests.status)

      - name: Filter all pull requests
        id: filter-prs
        if: steps.fetch-prs.outputs.pulls != ''
        uses: actions/github-script@v6
        with:
          script: |
            const validMasterPrs = ${{ steps.fetch-prs.outputs.pulls }}.filter(pr =>
              pr.base.ref === '${{ env.MASTER_BRANCH_NAME }}' && pr.title.includes('${{ env.SEARCH_PATTERN }}'));
            const invalidMasterPrs = ${{ steps.fetch-prs.outputs.pulls }}.filter(pr =>
               pr.base.ref === '${{ env.MASTER_BRANCH_NAME }}' && !pr.title.includes('${{ env.SEARCH_PATTERN }}'));
            const validStagingPrs = ${{ steps.fetch-prs.outputs.pulls }}.filter(pr => 
               pr.base.ref === '${{ env.STAGING_BRANCH_NAME}}')
            print(invalidMasterPrs)

            require('fs').appendFileSync(process.env.GITHUB_OUTPUT, `validMasterPrs=${JSON.stringify(validMasterPrs)}\n`);
            require('fs').appendFileSync(process.env.GITHUB_OUTPUT, `invalidMasterPrs=${JSON.stringify(invalidMasterPrs)}\n`);
            require('fs').appendFileSync(process.env.GITHUB_OUTPUT, `validStagingPrs=${JSON.stringify(validStagingPrs)}\n`);

  process_pull_requests:
    name: "Process each Pull Request"
    runs-on: ubuntu-latest
    needs: get_pull_requests

    steps:
      - name: "Process invalid PRs"
        id: process-invalid-prs
        if: ${{ needs.get_pull_requests.outputs.invalidMasterPrs }} != ''
        uses: actions/github-script@v6
        with:
          script: |
            const ERR_MSG = "Humans are not allowed to create pull requests to a master!\nCI/CD will do this"
            const prs = ${{ needs.get_pull_requests.outputs.invalidMasterPrs }}
            prs.forEach(pr => {
              response = github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                state: 'closed',
                body: ERR_MSG,
                });
              print(response)
              if (response.status === 200) {
                console.log(`Pull request ${pr.title}/${pr.number} to branch ${{ env.MASTER_BRANCH_NAME }} has been closed! Status code: ${response.status}`);
                } else {
                  console.log(`Couldn't close ${pr.title}/${pr.number}. Status code: ${response.status}`);
                  }
              });

      # - name: Search for auto pull requests to master
      #   id: process-auto-prs
      #   if: steps.fetch-prs.outputs.pulls != ''
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       console.log(${{ steps.fetch-prs.outputs.pulls }});
      #       const masterPullRequests = ${{ steps.fetch-prs.outputs.pulls }}.filter(pr =>
      #         pr.base.ref === '${{ env.MASTER_BRANCH_NAME }}' && pr.title.includes('${{ env.SEARCH_PATTERN }}'));
      #       const valid_prs = ${{ steps.fetch-prs.outputs.valid_prs }}
      #       console.log(valid_prs)
      #       valid_prs.push(...masterPullRequests)
      #       require('fs').appendFileSync(process.env.GITHUB_OUTPUT, `valid_prs=${JSON.stringify(valid_prs)}\n`);
      #       console.log('Filtered pull requests to master: ', masterPullRequests);

      # - name: Search for valid pull requests to staging
      #   id: process-staging-prs
      #   if: steps.fetch-prs.outputs.pulls != ''
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const stagingPullRequests = ${{ steps.fetch-prs.outputs.pulls }}.filter(pr =>
      #         pr.base.ref === '${{ env.MASTER_BRANCH_NAME }}' && pr.title.includes('fix'));
      #       const valid_prs = ${{ steps.process-auto-prs.outputs.valid_prs }};
      #       valid_prs.push(...stagingPullRequests);
      #       console.log(valid_prs)

#newPullRequests.push(...additionalPullRequest);
